#!/usr/bin/python2
# two sample student t test
# run "ttest_2sample.py data.txt" 

import string  
import math  
import sys  

import numpy as np
from scipy import stats
from scipy.stats import  t

##############  
# Parameters #  
##############  
ver = 1  
verbose = 1  
alpha = 0.02  
  
def usage():  
    print """ 
    usage: ./program data_file(one sample in one line) 
    """  
  
def main():  
  
    ##########  
    # Sample #  
    ##########  
    if (len(sys.argv) < 2):  
        usage()  
        sys.exit()  

    f = open(sys.argv[1])  
  
    try:  
        sample1_text = f.readline()  
        sample2_text = f.readline()  
    finally:  
        f.close()  
  
    # if (verbose):  
    #     print("sample1 text: ", sample1_text)  
    #     print("sample2 text: ", sample2_text)  
  
    sample1_text_split = sample1_text.split()  
    sample2_text_split = sample2_text.split()  
  
    if (verbose):  
        # print(sample1_text_split)  
        # print(sample2_text_split)  
        print("length1 = ", len(sample1_text_split))  
        print("length2 = ", len(sample2_text_split))  

    sample_len = len(sample1_text_split)  
  
    sample1 = []  
    sample2 = []  
  
    for i in range(sample_len):  
        sample1.append(string.atof(sample1_text_split[i]))  
        sample2.append(string.atof(sample2_text_split[i]))  

    ######################  
    # Hypothesis testing #  
    ######################  
  
    numargs = t.numargs  
    [ df ] = [sample_len - 1,] * numargs  
    if (verbose):  
        print("df(degree of freedom, student's t distribution parameter) = ", df)  
  
    sample_mean1 = np.mean(sample1)  
    sample_std1 = np.std(sample1, dtype=np.float64, ddof=1)  

    sample_mean2 = np.mean(sample2)  
    sample_std2 = np.std(sample2, dtype=np.float64, ddof=1)  

    len1 = len(sample1)
    len2 = len(sample2)

    print "=========================================="    
    if (verbose):  
        print("mean1 = %f, std1 = %f" % (sample_mean1, sample_std1))
        print("mean2 = %f, std2 = %f" % (sample_mean2, sample_std2))    

    modified_std1 = np.sqrt(np.float32(len1)/np.float32(len1-1)) * sample_std1
    modified_std2 = np.sqrt(np.float32(len2)/np.float32(len2-1)) * sample_std2

    (statistic, pvalue) = stats.ttest_ind_from_stats(mean1=sample_mean1, std1=modified_std1, nobs1=len1, mean2=sample_mean2, std2=modified_std2, nobs2=len2)

    print "t statistic is: ", statistic
    print "pvalue is: ", pvalue
    print "alpha is: ", alpha
  
    if (pvalue >= alpha):  
        print "ACCEPT the null hypothesis"  
    else:  
        print "REJECT the null hypothesis"  
    print "=========================================="

if __name__ == "__main__":  
    main()  